#!/usr/bin/env python
# -*- coding: utf8 -*-

import RPi.GPIO as GPIO
import MFRC522
import sqlite3
import os
from gps import *
from time import *
import time
import threading
import json
import requests
import sys
import Adafruit_CharLCD as LCD



gpsd = None #seting the global variable
lat=0
long=0
bal=0


# Raspberry Pi pin configuration:
lcd_rs        = 27  # Note this might need to be changed to 21 for older revision Pi's.
lcd_en        = 16
lcd_d4        = 26  #PREVIOUS 25
lcd_d5        = 24
lcd_d6        = 23
lcd_d7        = 18
lcd_backlight = 4
lcd_columns = 16
lcd_rows    = 2
lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7,lcd_columns, lcd_rows, lcd_backlight)

# GPS THREAD CLASS
class GpsPoller(threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self)
    global gpsd #bring it in scope
    gpsd = gps(mode=WATCH_ENABLE) #starting the stream of info
    self.current_value = None
    self.running = True #setting the thread running to true
 
  def run(self):
    global gpsd
    while gpsp.running:
      gpsd.next() #this will continue to loop and grab EACH set of gpsd info to clear the buffer
# validation for cuid
def validation(cuid):
	conn = sqlite3.connect("mydatabase.db")

	c = conn.cursor();
	c.execute("SELECT id FROM USERS")
	rows=c.fetchall()
	flag=False
	for row in rows:
		s="""%s"""%(row)
		if cuid==s:
			flag=True 
	if flag==True:
		c.execute("SELECT counter FROM USERS WHERE id=?",[cuid])
		counter=c.fetchall()
			
		tu=(counter[0])
		cu=tu[0]
		c.execute("SELECT balance FROM USERS WHERE id=?",[cuid])
		bal_get=c.fetchall()
		bal_t=bal_get[0]
		bal=bal_t[0]
		if cu==0:
			print cu
			cu=cu+1
			c.execute("UPDATE USERS SET lat_start=?,long_start=?,counter=? WHERE id=?",[lat,long,cu,cuid])
			conn.commit()
		elif cu==1:
			print cu
			cu=0
			c.execute("UPDATE USERS SET lat_start=?,long_start=?,counter=? WHERE id=?",[lat,long,cu,cuid])
			conn.commit()
			distance(cuid)
		elif bal<10:
			lcd.clear()
			lcd.message ('Not enough\n Balance!')
			
	else:
		lcd.clear()
		lcd.message ('Invalid\n Card!')
		print "invalid card"
			
			

# RFID READ
def rfidread():
# Create an object of the class MFRC522
	try:
		MIFAREReader = MFRC522.MFRC522()
	
	# Welcome message
		lcd.message ('Welcome\n Punch Your Card!')
		print "Press Ctrl-C to stop."
		flag=False
	# This loop keeps checking for chips. If one is near it will get the UID and authenticate
		while flag==False:
			
	    
	    # Scan for cards    
			(status,TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)
	
	    # If a card is found
			if status == MIFAREReader.MI_OK:
				lcd.clear()
				lcd.message ('Card\n Detected!')
	        		print "Card detected"
			
	    
	    # Get the UID of the card
			(status,uid) = MIFAREReader.MFRC522_Anticoll()
			
	
	    # If we have the UID, continue
			if status == MIFAREReader.MI_OK:
				cuid=(str(uid[0])+str(uid[1])+str(uid[2])+str(uid[3]))
				print "Card read UID: "+cuid
				validation(cuid)
	        		
				

			time.sleep(1)
						
			
	except (KeyboardInterrupt, SystemExit): #when you press ctrl+c
    		print "\nrfid Thread..."
    		gpsp.running = False
    		gpsp.join()